name: 'WebApp Console Log Action'
description: 'An action to capture and post console logs from a web application'
author: 'Jannis Hell (@Primajin)'

branding:
  icon: 'clipboard'
  color: 'blue'

inputs:
  artifact-name:
    description: 'The name of the artifact to download'
    required: true
  comment-tag:
    description: 'The tag to use for the comment - so it can be replaced, you may pass empty string to always post a new comment'
    required: false
    default: 'console-log'
  headline:
    description: 'The headline for the console logs comment'
    required: false
    default: 'Console Logs'
  max-log-level:
    description: 'The maximum log level to allow (verbose, info, warning, error). Set to error to disable failing.'
    required: false
    default: 'info'
  min-log-level:
    description: 'The minimum log level to capture (verbose, info, warning, error)'
    required: false
    default: 'verbose'
  show-emoji:
    description: 'Whether to show emojis in the output'
    required: false
    default: true
  wait-time:
    description: 'The wait time before capturing logs'
    required: false
    default: 2500
  webapp-url:
    description: 'The URL of the web application'
    required: true

outputs:
  console:
    description: 'The captured console log'

runs:
  using: 'composite'
  steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: npm-${{ hashFiles('package-lock.json') }}
        restore-keys: npm-

    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: app

    - name: Run http-server on port 3000 in the background #TODO: add port and directory as inputs
      run: npx http-server app/ -p 3000 &
      shell: bash

#    - name: DEBUG TEMP - List files in root #TODO: remove this
#      run: ls -la
#      shell: bash
#
#    - name: DEBUG TEMP - List files in app #TODO: remove this
#      run: ls -la app
#      shell: bash
#
#    - name: GITHUB_ACTION_PATH #TODO: remove this
#      run: ls -la $GITHUB_ACTION_PATH
#      shell: bash
#
#    - name: GITHUB_WORKSPACE #TODO: remove this
#      run: ls -la $GITHUB_WORKSPACE
#      shell: bash

    - name: Go to action path
      run: cd $GITHUB_ACTION_PATH
      shell: bash

    - name: Install dependencies
      run: npm ci
      shell: bash

    - name: Setup Chromium
      run: npx playwright install chromium
      shell: bash

    - name: Execute Capture Script
      run: node capture-console.mjs
      shell: bash
      env:
        WEBAPP_URL: ${{ inputs.webapp-url }}
        WAIT_TIME: ${{ inputs.wait-time }}
        MIN_LOG_LEVEL: ${{ inputs.min-log-level }}
        MAX_LOG_LEVEL: ${{ inputs.max-log-level }}

    - name: Set Output
      id: capture-console
      run: |
        echo 'console<<EOF' >> $GITHUB_OUTPUT
        jq -c . console_output.json >> $GITHUB_OUTPUT
        echo 'EOF' >> $GITHUB_OUTPUT
      shell: bash

    - name: Format Console Output  # Step to format the console output into GitHub Flavored Markdown
      id: format_console_output
      run: |
        # Create a markdown file and add a main heading
        echo "# ${{ inputs.headline }}" > formatted_console_output.md
        # Loop through each key in the JSON file
        for key in $(jq -r 'keys[]' console_output.json); do
          # Capitalize the first character of the key
          capitalized_key=$(echo "$key" | awk '{print toupper(substr($0, 1, 1)) tolower(substr($0, 2))}')
          # Add a subheading for each log level with matching emoji if show-emoji is true
          if [ "${{ inputs.show-emoji }}" = "true" ]; then
            case "$key" in
              verbose) emoji="💬" ;;
              info) emoji="ℹ️" ;;
              warning) emoji="⚠️" ;;
              error) emoji="❌" ;;
              *) emoji="" ;;
            esac
            echo "## $emoji $capitalized_key" >> formatted_console_output.md
          else
            echo "## $capitalized_key" >> formatted_console_output.md
          fi
          # Add a code block for each log message
          echo '```' >> formatted_console_output.md
          # Add each log message
          jq -r --arg key "$key" '.[$key][]' console_output.json >> formatted_console_output.md
          # Close the code block
          echo '```' >> formatted_console_output.md
          # Add an empty line for better readability when editing
          echo "" >> formatted_console_output.md
        done
      shell: bash

    - name: Post Console Output to PR
      if: github.event_name == 'pull_request'
      uses: thollander/actions-comment-pull-request@v3
      with:
        comment-tag: ${{ inputs.comment-tag }}
        file-path: formatted_console_output.md
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

    - name: Check if action should fail
      run: |
        if [ "$SHOULD_FAIL_ACTION" = "true" ]; then
          echo "Action should fail due to log level threshold."
          exit 1
        fi
      shell: bash
      env:
        SHOULD_FAIL_ACTION: ${{ env.SHOULD_FAIL_ACTION }}
